#!/usr/local/bin/ruby
#
# snapzfs: Yet another ZFS automatic snapshot management script.
#

if RUBY_VERSION.split(".").map(&:to_i)[0] < 2
	abort("Ruby version 2.0+ is required.")
end

require 'bigdecimal'
require 'optparse'
require 'pp'
require 'set'
require 'time'

$dry = false

module Snap
	module Exits # *stab* Ruby for not providing these.
		EX_OK = 0
		EX_USAGE = 64
		EX_UNAVAILABLE=69
		EX_TEMPFAIL = 75
		EX_CONFIG = 78
	end

	module CommandRunner
		class Error < StandardError ; end

		class NotFoundError < Error
			attr_reader :command, :path
			def initialize(message, command = nil)
				super(message)
				@command = command
			end
		end

		class CommandError < Error
			attr_reader :status
			def initialize(message, status = nil)
				super(message)
				@status = status
			end
		end

		def self.zfs(args)
			run([Which[:zfs], *args])
		end

		def self.run(cmd)
			p cmd if $VERBOSE

			self.popen(cmd)
		end

		def self.xargs(cmd, args: [], items: [], xargs: [])
			begin
				pcmd = [Which[:xargs], '-0', *xargs, Which[cmd], *args]
				p pcmd if $VERBOSE

				self.popen(pcmd) {|f| f.write(items.join("\000"))}
			rescue CommandError => e
				# Older ZFS doesn't support multiple snapshots :(
				if !xargs.include? '-n' and e.message =~ /too many arguments/
					xargs += %w(-n 1)
					retry
				else
					raise e
				end
			end
		end

		def self.popen(*cmd, &block)
			r,w = IO.pipe
			out = IO.popen(*cmd, 'a+', err: w) do |f|
				block.call(f) if block
				f.close_write
				f.read
			end
			w.close
			err = r.read || ''
			r.close

			if $?.success?
				return out || true
			else
				raise CommandError.new("Error running #{cmd.inspect}, exit=#{$?.exitstatus}, stderr=\n#{err.gsub(/^/,"> ")}", $?)
			end
		end

		Which = Hash.new do |hash, cmd|
			exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
			ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
				exts.each { |ext|
					exe = File.join(path, "#{cmd}#{ext}")
					if File.executable? exe
						hash[cmd] = exe
						break
					end
				}
			end
			if hash.key?(cmd)
				hash[cmd]
			else
				raise NotFoundError.new("#{cmd} not found in #{ENV['PATH']}", cmd)
			end
		end
	end

	module ZFS
		def self.property(name)
			"st.hur:snapshot.#{name}"
		end

		class Dataset
			class << self
				def properties() @properties ||= [] end
				def all_properties() @all_properties ||= Set.new end
				def property(name)
					properties << name
					Dataset.all_properties << name
				end

				def inherited(klass)
					properties.each {|prop| klass.property prop }
				end
			end

			property 'name'
			property 'type'
			property 'used'
			property ZFS.property :auto
			property ZFS.property :policy

			attr_reader :properties

			def name() self['name'] end

			# XXX: would prefer to use list -p, but not available on Linux atm.
			# For the time being I only care if this is zero, so allow us to turn "104k" into 104.
			def used() self['used'].to_i end

			def used?() !used.zero? end

			def [](key) @properties[key] end

			def initialize(properties)
				@properties = properties
			end
		end

		class Snapshottable < Dataset
			attr_accessor :snapshots

			def initialize(*)
				super
				@snapshots = []
			end

			def auto_snapshot?
				properties[ZFS.property :auto] != '-'
			end

			def auto_snapshots
				@auto_snapshots ||= snapshots.select(&:automatic?).sort_by(&:created_at)
			end

			class << self
				def policy_cache(policy) (@polices ||= {})[policy] ||= Policy.parse_policies(policy) end
			end

			def policy
				unless (policy = properties[ZFS.property :policy]) == '-'
					Snapshottable.policy_cache(policy)
				end
			end

			def snapshot!(snapshot_name, properties = {})
				props = {}
				props[ZFS.property :policies] = properties[:policies].join(' ') if properties[:policies]
				props[ZFS.property :created_at] = Integer(properties[:created_at]) or raise ArgumentError, "No creation time"
				props[ZFS.property :expires_at] = Integer(properties[:expires_at]) if properties[:expires_at]
				ZFS.snapshot("#{self.name}@#{snapshot_name}", props)
			end

			def written(since)
				Integer(ZFS.get_one(self.name, "written@#{since}"))
			end
		end

		class Filesystem < Snapshottable
			property 'mountpoint'
		end

		class Volume < Snapshottable
		end

		class Snapshot < Dataset
			property ZFS.property :expires_at
			property ZFS.property :created_at
			property ZFS.property :policies

			def inspect
				"#<Snapshot:#{object_id}: #{properties.inspect}>"
			end

			def automatic?
				properties[ZFS.property :created_at] != '-'
			end

			def expires_at
				if (prop = properties[ZFS.property :expires_at]) != '-'
					@expires_at ||= Time.at(Integer(prop))
				end
			end

			def created_at
				@created_at ||= Time.at(Integer(properties[ZFS.property :created_at]))
			end

			def age(now)
				now.to_i - created_at.to_i
			end

			def policies
				@policies ||= Set.new(properties[ZFS.property :policies].scan(/\d+/).map(&:to_i))
			end

			def snap_name
				name.split('@')[1]
			end

			def snapshot_of
				name.split('@').first
			end

			def destroy!
				ZFS.destroy self
			end
		end

		class << self
			def get_one(dataset, property)
				op = %(zfs get -Hp -o value)
				op << property
				op << dataset
				CommandRunner.zfs(op)
			end

			def snapshot(name, properties)
				queued_snapshots[properties] << name
			end

			def destroy(dataset)
				queued_destroys << dataset
			end

			def commit!
				queued_snapshots.each do |properties, names|
					op = %w(snapshot)
					op += properties.map {|name,value| ['-o', "#{name}=#{value}"] }.flatten
					#op += names
					if $dry
						pp [op, names]
					else
						CommandRunner.xargs(:zfs, args: op, items: names)
					end
				end
				queued_snapshots.clear

				workers = []
				queued_destroys.group_by(&:snapshot_of).each do |dataset,snapshots|
					workers << Thread.new do
						op = %w(destroy -d)
						op += ["#{dataset}@#{snapshots.map(&:snap_name).join(',')}"]
						if $dry
							pp op
						else
							CommandRunner.zfs(op)
						end
					end
				end
				workers.each(&:join)
				queued_destroys.clear
			end

			def queued_snapshots() @queued_snapshots ||= Hash.new{|h,k| h[k] = []} end
			def queued_destroys() @queued_destrots ||= [] end

			def list(type: %w(filesystem volume), properties: [])
				properties = ['name', 'type', *properties].uniq
				op = %w(list -S name -H -o)
				op << properties.join(',')
				op += ['-t', Array(type).join(',')] if type
				datasets = CommandRunner.zfs(op).lines.map {|line| line.chomp.split("\t", properties.size) }
				datasets.map {|props| Hash[properties.zip(props)] }
			end

			def datasets
				dsts = list(type: %w(filesystem volume snapshot), properties: Dataset.all_properties)
				dsts = dsts.group_by{|ds| ds['type'] }
				snapshottable = Hash[dsts.values_at('filesystem','volume').flatten.compact.map do |props|
					klass = props['type'] == 'filesystem' ? Filesystem : Volume
					[props['name'], klass.new(props)]
				end]

				dsts.fetch('snapshot', []).map {|props| Snapshot.new(props) }.each do |snapshot|
					snapshottable[snapshot.snapshot_of].snapshots << snapshot
				end
				return snapshottable
			end
		end
	end

	Policy = Struct.new(:raw, :seconds, :count)
	class Policy # Rename Policy, support "midnight", "end of day", "start of month" etc?
		Periods = {
			1           => %w(s sec secs second seconds secondly),
			60          => %w(m min minute minutes minutely),
			3600        => %w(h hr hour hours hourly),
			3600*24     => %w(d dy day days daily),
			3600*24*7   => %w(wk week weeks weekly),
			3600*24*14  => %w(f fort fortnight fortnightly),
			3600*24*31  => %w(mn mon month months monthly),
			3600*24*356 => %w(y yr year years yearly),
		}

		PeriodRE = /(?:#{Periods.values.flatten.join('|')})/i
		PeriodMap = Periods.map.with_object({}) {|(k,v),h| v.each {|name| h[name] = k } }
		PeriodMap.default_proc = proc {|h,k| raise ArgumentError, "Invalid period: #{k.dump}" }

		def self.parse_policies(string)
			used_policies = Set.new
			string.split(/\s*;\s*/).map do |part|
				pol = case part
					# 5 weekly; 5 * weekly; weekly
				when /\A(\d+)?\s*\*?\s*(#{PeriodRE})\s*\z/i
					new(part, PeriodMap[$2.downcase], $1.nil? ? 1 : Integer($1))

					# 5 * 1 week; 5 * 6 week
				when /\A(\d+)\s*\*\s*(\d+(?:\.\d+)?)\s*(#{PeriodRE})\s*\z/i
					new(part, (PeriodMap[$3.downcase] * Float($2)).round, Integer($1))

				else
					raise ArgumentError, "Unable to parse interval: #{part.dump}"
				end
				raise ArgumentError, "Minimum policy time is 1 minute" if pol.seconds < 60
				raise ArgumentError, "Duplicate interval: #{part.dump}" if used_policies.include? pol.seconds
				used_policies << pol.seconds
				pol
			end
		end

		def cutoff(now)
			@cutoff ||= now - seconds * count
		end
	end

	class PidFile
		class AlreadyRunningError < StandardError
		end

		def already_running
			raise AlreadyRunningError, "Already running as pid #{@pid}"
		end

		def process_exists?(pid)
			!!Process.kill(0, pid)
		rescue Errno::ESRCH
			return false
		end

		def lock
			@pidfile.flock(IO::LOCK_EX|IO::LOCK_NB)
		end

		def initialize(file)
			@filename = file
			@aquired = false

			aquire
		end

		def self.with_file(file, &block)
			pidfile = new(file)
			block.call
		ensure
			pidfile and pidfile.release
		end

		def aquire
			@pidfile = File.new(@filename, File::CREAT|File::RDWR)

			@pid = @pidfile.read.to_i
			@pidfile.rewind

			already_running unless lock
			already_running if @pid.nonzero? and process_exists?(@pid)

			@pidfile.write($$.to_s)
			@pidfile.flush
			@aquired = true
		rescue => e
			release
			raise e
		end

		def release
			if @pidfile and !@pidfile.closed?
				begin
					File.delete(@filename) if @aquired
				ensure
					@pidfile.close
				end
			end
		end
	end

	class App
		attr_reader :options, :now

		Defaults = {
			prefix: 'auto.',
			format: '%FT%RZ',
			verbose: false,
			dry_run: false,
			pid_file: '/var/run/snapzfs.pid',
			policy: '4 * 1 minutes; 4 * 15 minutes; 24 hourly; 7 daily; 4 weekly; 4 monthly',
		}

		Command = Struct.new(:name, :opts, :proc)

		class << self
			def command(name, &block)
				define_method("cmd_#{name}", block)
			end
		end

		def self.run(args)
			new(args)
		end

		def initialize(args)
			@all_args = args
			args = args.dup

			@now = Time.new

			@options = Defaults.dup

			begin
				CommandRunner::Which.values_at(:zfs,:xargs)
			rescue CommandRunner::Error => e
				puts e.message
				exit(Exits::EX_UNAVAILABLE)
			end

			PidFile.with_file(options[:pid_file]) do
				cmd = "cmd_#{args.shift}".to_sym
				if respond_to? cmd
					meth = method(cmd)
					if meth.arity.zero?
						if args.any?
							usage_error
							exit 1
						end
						meth.call
					else
						meth.call(args)
					end
				else
					usage_error
				end
			end
		rescue PidFile::AlreadyRunningError => e
			abort(e.message)
		rescue CommandRunner::NotFoundError => e
			puts e.message
			exit Exits::EX_UNAVAILABLE
		rescue CommandRunner::CommandError => e
			puts e.message
			exit e.status.exitcode
		rescue SystemExit => e
			exit e.status
		rescue Exception => e
			abort <<EOC
*** BUG: unhandled exception
Please report this to tom@hur.st

#{e.class}: #{e.message}
  #{e.backtrace.join("\n  ")}
EOC
		end

		def d(txt = nil)
			puts txt if $VERBOSE
		end

		def datasets() @datasets ||= ZFS.datasets end
		def datasets_refresh() @datasets = ZFS.datasets end
		def managed_snapshots
			@managed_snapshots ||= datasets.values.map(&:auto_snapshots).flatten
		end
		def managed_datasets
			@managed_datasets ||= datasets.values.select(&:auto_snapshot?)
		end

		def policy(dataset)
			dataset.policy || ZFS::Snapshottable.policy_cache(options[:policy])
		end

		def toggle(args, bool)
			args.each {|arg| CommandRunner.zfs(['set', "#{ZFS.property :auto}=#{bool ? 'true' : 'false'}", arg])}
		end

		def snap_name
			@name ||= "#{options[:prefix]}#{now.dup.utc.strftime(options[:format])}"
		end

		#def cmd_policy(args)
		command :policy do |args|
			if args.empty?
				managed_datasets.each do |dataset|
					puts " * #{dataset.name}: #{policy(dataset).map(&:raw).join('; ')}"
					policy(dataset).each do |pol|
						puts "    #{pol.raw}: #{pol.count} snapshots #{pol.seconds} (#{'%.2f' % (pol.seconds / 3600.0)} hours) apart"
					end
				end
				exit 0
			end

			spec = args.shift
			if spec == 'reset'
				args.each {|arg| CommandRunner.zfs(['inherit', ZFS.property(:policy), arg])}
				exit 0
			end

			begin
				policy = ZFS::Snapshottable.policy_cache(spec)
			rescue => e
				abort("Invalid policy specification: #{e.message}")
			else
				policy.each do |pol|
					puts "#{pol.raw}: #{pol.count} snapshots #{pol.seconds} (#{'%.2f' % (pol.seconds / 3600.0)} hours) apart"
				end
				args.each {|arg| CommandRunner.zfs(['set', "#{ZFS.property :policy}=#{spec}", arg])}
			end
		end

		#def cmd_enable(args)
		command :enable do |args|
			toggle(args, true)
		end

		#def cmd_disable(args)
		command :disable do |args|
			toggle(args, false)
		end

		#def cmd_list(args)
		command :list do |args|
			exit if managed_snapshots.empty?
			print CommandRunner.xargs(:zfs, args: ['list', *args], items: managed_snapshots.map(&:name))
		end

		#def cmd_nuke(args)
		command :nuke do
			unless STDOUT.tty?
				abort("Nuke command is strictly interactive-only.")
			end

			STDOUT.sync = true
			snapshots = managed_snapshots

			abort("No snapshots to nuke") if snapshots.empty?

			puts "WARNING: This command will destroy the following snapshots:"
			print "    ", snapshots.map(&:name).join("\n    ")
			puts

			confirmation = "destroy all the snapshots!"
			print "To continue, type: '#{confirmation}': "
			if STDIN.gets.chomp == confirmation
				snapshots.each(&:destroy!)
				ZFS.commit!
			else
				puts "Aborting"
			end
		end

		#def cmd_create(args)
		command :create do
			managed_datasets.each do |dataset|
				d "#{dataset.name}..."
				policies = []
				snapshots = dataset.auto_snapshots
				policy(dataset).each do |pol|
					pol_snapshots = snapshots.select {|snapshot| snapshot.policies.include? pol.seconds }
					if pol_snapshots.empty? or pol_snapshots.last.age(now) >= (pol.seconds - 15)
						policies << pol.seconds
					end
				end

				extra = nil
				unless policies.empty?
					while dataset.snapshots.any? {|snapshot| snapshot.snap_name == (snap_name + extra.to_s) }
						extra ||= '.0'
						extra.succ!
					end
					dataset.snapshot!(snap_name + extra.to_s, policies: policies, created_at: now)
				end
			end

			ZFS.commit!
		end

		#def cmd_expire(args)
		command :expire do
			datasets.each do |name, dataset|
				dataset.auto_snapshots.each do |snapshot|
					refs = 0

					policy(dataset).each do |pol|
						if snapshot.policies.include?(pol.seconds) and pol.cutoff(now) <= snapshot.created_at
							refs += 1
						end
					end

					if refs.zero?
						if !(e = snapshot.expires_at) or e < now
							snapshot.destroy!
						end
					end
				end
			end

			ZFS.commit!
		end

		#def cmd_clean(args)
		command :clean do
			datasets_refresh.each do |name, dataset|
				dataset.auto_snapshots.group_by(&:policies).each do |pol, snapshots|
					next if snapshots.size < 2
					snapshots[0..-2].reject(&:used?).each do |snapshot|
						d "empty: #{snapshot.name}"
						snapshot.destroy!
					end
				end
			end

			ZFS.commit!
		end

		#def cmd_auto(args)
		command :auto do
			cmd_create
			cmd_expire
			cmd_clean
		end

		%w(help --help -h).each{|s| command(s) { usage }}

		def usage_error() usage(Exits::EX_USAGE) end
		def usage(exitcode = 0)
			puts <<EOC
snapzfs: Yet another stupid and probably broken ZFS rolling snapshot script you
         probably shouldn't use.

#{$0} [help | --help | -h]
  Prints this help text.

#{$0} [create | expire]
  Creates or destroys snapshots according to the policy for each dataset.

#{$0} clean
  Destroys old empty snapshots.

#{$0} auto
  Creates, expires and cleans snapshots.

#{$0} list
  Lists any managed snapshots, if any. Passes flags through to zfs list.

#{$0} policy
  Lists policies for managed datasets.

#{$0} policy [policy] [dataset[ dataset ..]]
  Parses the specified property. If datasets are specified and the policy is
  successfully parsed, sets the policy for those datasets.

#{$0} [enable | disable] [dataset[ dataset ..]]
  Enables or disables automatic snapshot creation for the dataset, without changing
  its configured policy.  Note existing snapshots will continue to be expired.

#{$0} nuke
  Destroys all managed snapshots after a written confirmation.


Policies:
  Policies are strings describing snapshot creation regularity and the number
  of those snapshots to keep, separated by semicolons.  In future they will
  include specific times and dates, like "4 midnightly" and "start of month".
  Maybe.

  Examples:

    4 hourly; 7 daily; 4 weekly; 3 monthly

  Keeps 4 snapshots at hourly intervals, 7 at 24 hour intervals, 4 at 7 day
  intervals and 3 at 31 day intervals.  Note these are dated from the first time
  the snapshots are created, *not* by the absolute date or time.  If you start
  the script at 13:30, your hourly snapshots will be at 13:30, 14:30, 15:30 and
  so (assuming the script is actually executed).  If after the first snapshot
  you wait 90 minutes, the next hourly snapshot will be at 15:00.

    4 * 3 hourly

  Keep 4 snapshots at 3-hour intervals.
EOC
			exit exitcode
		end
	end
end

Snap::App.run(ARGV)